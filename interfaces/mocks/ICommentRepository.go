// Code generated by mockery v1.0.0. DO NOT EDIT.

package mocks

import mock "github.com/stretchr/testify/mock"
import models "go-mongo/models"

// ICommentRepository is an autogenerated mock type for the ICommentRepository type
type ICommentRepository struct {
	mock.Mock
}

// Delete provides a mock function with given fields: payload
func (_m *ICommentRepository) Delete(payload models.CommentModel) (int, error) {
	ret := _m.Called(payload)

	var r0 int
	if rf, ok := ret.Get(0).(func(models.CommentModel) int); ok {
		r0 = rf(payload)
	} else {
		r0 = ret.Get(0).(int)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(models.CommentModel) error); ok {
		r1 = rf(payload)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetAll provides a mock function with given fields: payload
func (_m *ICommentRepository) GetAll(payload models.CommentModel) ([]models.CommentModel, error) {
	ret := _m.Called(payload)

	var r0 []models.CommentModel
	if rf, ok := ret.Get(0).(func(models.CommentModel) []models.CommentModel); ok {
		r0 = rf(payload)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]models.CommentModel)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(models.CommentModel) error); ok {
		r1 = rf(payload)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Publish provides a mock function with given fields: payload
func (_m *ICommentRepository) Publish(payload models.CommentModel) (models.CommentModel, error) {
	ret := _m.Called(payload)

	var r0 models.CommentModel
	if rf, ok := ret.Get(0).(func(models.CommentModel) models.CommentModel); ok {
		r0 = rf(payload)
	} else {
		r0 = ret.Get(0).(models.CommentModel)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(models.CommentModel) error); ok {
		r1 = rf(payload)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}
